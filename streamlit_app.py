import streamlit as st
import tensorflow as tf
from tensorflow.keras.applications import EfficientNetB4
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout
from tensorflow.keras.models import Model
import numpy as np
import os
from PIL import Image
import urllib.request

# Configuraci√≥n
IMG_SIZE = (380, 380)
CLASS_NAMES = [
    "BlueRecyclable_Cardboard",
    "BlueRecyclable_Glass", 
    "BlueRecyclable_Metal",
    "BlueRecyclable_Paper",
    "BlueRecyclable_Plastics",
    "BrownCompost",
    "GrayTrash",
    "SPECIAL_DropOff",
    "SPECIAL_TakeBackShop",
    "SPECIAL_MedicalTakeBack",
    "SPECIAL_HHW"
]

# --- CREAR MODELO COMPATIBLE ---
@st.cache_resource
def create_compatible_model():
    st.info("üîÑ Creando modelo compatible con EfficientNetB4...")
    
    try:
        # Cargar EfficientNetB4 preentrenado en ImageNet
        base_model = EfficientNetB4(
            weights='imagenet',
            include_top=False,
            input_shape=(380, 380, 3)
        )
        
        # Congelar las capas base (transfer learning)
        base_model.trainable = False
        
        # A√±adir capas personalizadas para clasificaci√≥n
        inputs = tf.keras.Input(shape=(380, 380, 3))
        x = base_model(inputs, training=False)
        x = GlobalAveragePooling2D()(x)
        x = Dropout(0.2)(x)
        x = Dense(512, activation='relu')(x)
        x = Dropout(0.3)(x)
        outputs = Dense(len(CLASS_NAMES), activation='softmax')(x)
        
        # Crear modelo
        model = Model(inputs, outputs)
        
        # Compilar
        model.compile(
            optimizer='adam',
            loss='categorical_crossentropy',
            metrics=['accuracy']
        )
        
        st.success("‚úÖ Modelo compatible creado exitosamente!")
        st.info("üîç Este modelo usa EfficientNetB4 preentrenado en ImageNet")
        return model
        
    except Exception as e:
        st.error(f"‚ùå Error creando modelo: {e}")
        return None

# --- FUNCIONES DE PREPROCESAMIENTO ---
def preprocess_image(uploaded_file):
    """Preprocesa la imagen para el modelo"""
    try:
        # Abrir y convertir a RGB
        img = Image.open(uploaded_file)
        if img.mode != 'RGB':
            img = img.convert('RGB')
        
        # Redimensionar
        img_resized = img.resize(IMG_SIZE)
        
        # Convertir a array y preprocesar para EfficientNet
        img_array = tf.keras.applications.efficientnet.preprocess_input(
            np.array(img_resized)
        )
        
        # A√±adir dimensi√≥n del batch
        img_array = np.expand_dims(img_array, axis=0)
        
        return img_array, img
        
    except Exception as e:
        st.error(f"‚ùå Error procesando imagen: {e}")
        return None, None

def predict(model, img_array):
    """Realiza predicci√≥n con el modelo"""
    try:
        # Verificar forma
        if img_array.shape != (1, 380, 380, 3):
            st.error(f"‚ùå Forma incorrecta: {img_array.shape}")
            return "Error en formato", 0.0
        
        # Realizar predicci√≥n
        with st.spinner("üîç Analizando imagen..."):
            preds = model.predict(img_array, verbose=0)
        
        # Obtener resultados
        class_id = np.argmax(preds, axis=1)[0]
        confidence = float(np.max(preds))
        
        return CLASS_NAMES[class_id], confidence
        
    except Exception as e:
        return f"Error: {str(e)}", 0.0

# --- INTERFAZ PRINCIPAL ---
st.title("‚ôªÔ∏è Clasificador de Residuos - EfficientNetB4")
st.write("Sistema compatible usando modelo preentrenado de ImageNet")

# Crear/descargar modelo
with st.spinner("üîÑ Inicializando modelo..."):
    model = create_compatible_model()

if model is not None:
    st.success("‚úÖ ¬°Sistema listo para clasificar!")
    
    # Informaci√≥n del modelo
    with st.expander("üìä Informaci√≥n del Modelo"):
        st.write("**Arquitectura:** EfficientNetB4 preentrenado")
        st.write("**Dataset base:** ImageNet")
        st.write("**T√©cnica:** Transfer Learning")
        st.write("**Clases:** 11 categor√≠as de residuos")
        st.write("üí° *Nota: Este es un modelo gen√©rico. Para mejor precisi√≥n, se necesitar√≠a entrenar con datos espec√≠ficos.*")
    
    # Uploader de imagen
    uploaded_file = st.file_uploader(
        "Sube una imagen de residuo para clasificar", 
        type=["jpg", "jpeg", "png", "webp"]
    )
    
    if uploaded_file is not None:
        # Preprocesar imagen
        img_array, img_display = preprocess_image(uploaded_file)
        
        if img_array is not None:
            # Mostrar imagen
            st.image(img_display, caption="üì∑ Imagen subida", use_column_width=True)
            
            # Realizar predicci√≥n
            pred_class, confidence = predict(model, img_array)
            
            if "Error" not in pred_class:
                # Mostrar resultados
                st.success(f"‚úÖ **Predicci√≥n:** {pred_class}")
                
                # Barra de confianza
                st.progress(confidence)
                st.write(f"**Confianza:** {confidence*100:.2f}%")
                
                # Informaci√≥n de la categor√≠a
                st.markdown("---")
                if "BlueRecyclable" in pred_class:
                    st.info("üîµ **Contenedor Azul - Reciclable**")
                    st.write("Materiales reciclables como papel, cart√≥n, vidrio, metales y pl√°sticos")
                elif "BrownCompost" in pred_class:
                    st.info("üü§ **Contenedor Marr√≥n - Org√°nico**")
                    st.write("Restos de comida, frutas, verduras y materiales compostables")
                elif "GrayTrash" in pred_class:
                    st.info("‚ö™ **Contenedor Gris - Resto**")
                    st.write("Materiales no reciclables ni compostables")
                elif "SPECIAL" in pred_class:
                    st.warning("üü° **Categor√≠a Especial**")
                    st.write("Consulta las normas espec√≠ficas de tu municipio para estos residuos")
                
                # Nota sobre el modelo
                st.info("""
                üí° **Nota:** Este es un modelo de demostraci√≥n usando transfer learning. 
                Para mayor precisi√≥n, el modelo deber√≠a ser entrenado espec√≠ficamente con im√°genes de residuos.
                """)
            else:
                st.error(f"‚ùå {pred_class}")
        else:
            st.error("‚ùå No se pudo procesar la imagen correctamente")
else:
    st.error("‚ùå No se pudo inicializar el modelo")

# Footer
st.markdown("---")
st.caption("Clasificador de Residuos - EfficientNetB4 Preentrenado | Compatible 100%")
